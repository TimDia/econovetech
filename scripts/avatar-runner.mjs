import fs from "fs";
import path from "path";
import crypto from "crypto";

const root = process.cwd();
const avatarsRoot = path.join(root, "avatars");
const pendingDir  = path.join(avatarsRoot, "pending");
const activeDir   = path.join(avatarsRoot, "active");
const doneDir     = path.join(avatarsRoot, "done");
const failedDir   = path.join(avatarsRoot, "failed");
const marketDir   = path.join(root, "marketplace");
const reportsDir  = path.join(root, "reports");

function ensureDirs() {
  for (const d of [avatarsRoot, pendingDir, activeDir, doneDir, failedDir, marketDir, reportsDir]) {
    if (!fs.existsSync(d)) fs.mkdirSync(d, { recursive: true });
  }
}

function listAvatarJobs(limit = 1000) {
  // Prefer pending/, else fall back to avatars/ (flat files you created earlier)
  const folder = fs.existsSync(pendingDir) ? pendingDir : avatarsRoot;
  const files = fs.readdirSync(folder).filter(f => f.endsWith(".json")).slice(0, limit);
  return files.map(f => path.join(folder, f));
}

function makeAssetContent(i) {
  const now = new Date().toISOString();
  const id = crypto.randomBytes(8).toString("hex");
  return {
    id,
    title: `UEOS Asset #${i}`,
    createdAt: now,
    description: "Autogenerated placeholder asset for Econovetech marketplace.",
    attributes: {
      rarity: ["common","uncommon","rare","epic","legendary"][Math.floor(Math.random()*5)],
      power: Math.floor(Math.random()*100),
      creator: "UEOS Avatar Worker"
    }
  };
}

function safeMove(src, dstFolder) {
  try {
    const to = path.join(dstFolder, path.basename(src));
    fs.renameSync(src, to);
  } catch {
    // Fall back to copy+unlink if rename across volumes fails
    try {
      const to = path.join(dstFolder, path.basename(src));
      fs.copyFileSync(src, to);
      fs.unlinkSync(src);
    } catch {}
  }
}

function main() {
  ensureDirs();
  const jobs = listAvatarJobs(); // process up to 1000 at a time
  let ok = 0, fail = 0;

  for (const jobPath of jobs) {
    try {
      const raw = fs.readFileSync(jobPath, "utf8"); const job = JSON.parse(raw.replace(/^\uFEFF/, ""));
      const idx = job.id ?? ok + 1;
      const asset = makeAssetContent(idx);

      const outFile = path.join(marketDir, `asset_${idx}.json`);
      fs.writeFileSync(outFile, JSON.stringify(asset, null, 2), "utf8");

      const repFile = path.join(reportsDir, `report_${idx}.txt`);
      fs.writeFileSync(repFile,
        `Asset: ${asset.title}\nID: ${asset.id}\nRarity: ${asset.attributes.rarity}\nPower: ${asset.attributes.power}\nGenerated: ${asset.createdAt}\n`,
        "utf8"
      );

      // mark job complete and move to done/
      job.status = "completed";
      job.asset = path.basename(outFile);
      fs.writeFileSync(jobPath, JSON.stringify(job, null, 2), "utf8");
      safeMove(jobPath, doneDir);
      ok++;
    } catch (e) {
      console.error("Failed job:", jobPath, e);
      try { safeMove(jobPath, failedDir); } catch {}
      fail++;
    }
  }

  console.log(`✅ Created ${ok} assets → ./marketplace | reports → ./reports | failed: ${fail}`);
}

main();

